<?php

namespace ContainerPpHIGmv;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Dbal_DefaultConnectionService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = new \Doctrine\DBAL\Configuration();
        $a->setSchemaAssetsFilter(new \Doctrine\Bundle\DoctrineBundle\Dbal\SchemaAssetsFilterManager([0 => new \Doctrine\Bundle\DoctrineBundle\Dbal\BlacklistSchemaAssetFilter([0 => 'sessions', 1 => 'cache_items']), 1 => new \Doctrine\Bundle\DoctrineBundle\Dbal\RegexSchemaAssetFilter('~^(?!(cache_items|LearningStandards|std_*|map_*|grade_level))~')]));
        $b = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
        ], [
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
        ]));

        $container->services['doctrine.dbal.default_connection'] = $instance = (new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory($container->parameters['doctrine.dbal.connection_factory.types']))->createConnection(['driver' => 'pdo_mysql', 'host' => $container->getEnv('MYSQL_HOST'), 'port' => $container->getEnv('int:MYSQL_PORT'), 'dbname' => $container->getEnv('MYSQL_DATABASE'), 'user' => $container->getEnv('MYSQL_USER'), 'password' => $container->getEnv('MYSQL_PASSWORD'), 'charset' => 'utf8mb4', 'driverOptions' => [], 'serverVersion' => 5.7, 'defaultTableOptions' => ['charset' => 'utf8mb4', 'collate' => 'utf8mb4_unicode_ci']], $a, $b, ['json' => 'string', 'uuid_binary' => 'binary', 'uuid_binary_ordered_time' => 'binary']);
        $c = ($container->services['simplethings_entityaudit.manager'] ?? $container->load('getSimplethingsEntityaudit_ManagerService'));
        $d = new \Gedmo\Tree\TreeListener();

        $e = ($container->privates['annotations.cached_reader'] ?? $container->getAnnotations_CachedReaderService());

        $d->setAnnotationReader($e);
        $f = new \Gedmo\Timestampable\TimestampableListener();
        $f->setAnnotationReader($e);

        $b->addEventSubscriber(new \Symfony\Bridge\Doctrine\SchemaListener\PdoCacheAdapterDoctrineSchemaSubscriber([0 => ($container->privates['salt.cache.external_docs'] ?? $container->load('getSalt_Cache_ExternalDocsService'))]));
        $b->addEventSubscriber(new \SimpleThings\EntityAudit\EventListener\LogRevisionsListener($c));
        $b->addEventSubscriber(new \SimpleThings\EntityAudit\EventListener\CreateSchemaListener($c));
        $b->addEventSubscriber($d);
        $b->addEventSubscriber($f);
        $b->addEventListener([0 => 'loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners');

        return $instance;
    }
}
