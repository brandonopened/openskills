<?php

namespace ContainerPpHIGmv;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSessionService extends App_KernelProdContainer
{
    /*
     * Gets the public 'session' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session(new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage($container->parameters['session.storage.options'], new \Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler('mysql:host='.$container->getEnv('string:MYSQL_HOST').';port='.$container->getEnv('string:int:MYSQL_PORT').';dbname='.$container->getEnv('string:MYSQL_DATABASE'), ['db_username' => $container->getEnv('MYSQL_USER'), 'db_password' => $container->getEnv('MYSQL_PASSWORD'), 'db_table' => 'auth_session', 'db_id_col' => 'id', 'db_connection_options' => NULL]), new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', 120)), NULL, NULL, [0 => ($container->privates['session_listener'] ?? $container->getSessionListenerService()), 1 => 'onSessionUsage']);
    }
}
