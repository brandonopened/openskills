<?php

namespace ContainerPpHIGmv;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class App_KernelProdContainer extends Container
{
    protected $containerDir;
    protected $targetDir;
    protected $parameters = [];
    private $buildParameters;
    protected $getService;

    public function __construct(array $buildParameters = [], $containerDir = __DIR__)
    {
        $this->getService = \Closure::fromCallable([$this, 'getService']);
        $this->buildParameters = $buildParameters;
        $this->containerDir = $containerDir;
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            'cache.app' => 'getCache_AppService',
            'doctrine' => 'getDoctrineService',
            'event_dispatcher' => 'getEventDispatcherService',
            'http_kernel' => 'getHttpKernelService',
            'qandidate.toggle.collection' => 'getQandidate_Toggle_CollectionService',
            'qandidate.toggle.collection.in_memory' => 'getQandidate_Toggle_Collection_InMemoryService',
            'qandidate.toggle.manager' => 'getQandidate_Toggle_ManagerService',
            'qandidate.toggle.user_context_factory' => 'getQandidate_Toggle_UserContextFactoryService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
        ];
        $this->fileMap = [
            'App\\Controller\\Api\\CaseDocController' => 'getCaseDocControllerService',
            'App\\Controller\\Api\\CaseV1P0Controller' => 'getCaseV1P0ControllerService',
            'App\\Controller\\Api\\LorSupportController' => 'getLorSupportControllerService',
            'App\\Controller\\AsnImportController' => 'getAsnImportControllerService',
            'App\\Controller\\CaseImportController' => 'getCaseImportControllerService',
            'App\\Controller\\Cms\\ExportController' => 'getExportControllerService',
            'App\\Controller\\CommentsController' => 'getCommentsControllerService',
            'App\\Controller\\DefaultController' => 'getDefaultControllerService',
            'App\\Controller\\DocRevisionController' => 'getDocRevisionControllerService',
            'App\\Controller\\ExcelExportController' => 'getExcelExportControllerService',
            'App\\Controller\\ExcelImportController' => 'getExcelImportControllerService',
            'App\\Controller\\Framework\\AdditionalFieldController' => 'getAdditionalFieldControllerService',
            'App\\Controller\\Framework\\CfPackageController' => 'getCfPackageControllerService',
            'App\\Controller\\Framework\\CloneController' => 'getCloneControllerService',
            'App\\Controller\\Framework\\CopyController' => 'getCopyControllerService',
            'App\\Controller\\Framework\\DocTreeController' => 'getDocTreeControllerService',
            'App\\Controller\\Framework\\EditorController' => 'getEditorControllerService',
            'App\\Controller\\Framework\\LockController' => 'getLockControllerService',
            'App\\Controller\\Framework\\LsAssociationController' => 'getLsAssociationControllerService',
            'App\\Controller\\Framework\\LsDefAssociationGroupingController' => 'getLsDefAssociationGroupingControllerService',
            'App\\Controller\\Framework\\LsDefConceptController' => 'getLsDefConceptControllerService',
            'App\\Controller\\Framework\\LsDefGradeController' => 'getLsDefGradeControllerService',
            'App\\Controller\\Framework\\LsDefItemTypeController' => 'getLsDefItemTypeControllerService',
            'App\\Controller\\Framework\\LsDefLicenceController' => 'getLsDefLicenceControllerService',
            'App\\Controller\\Framework\\LsDefSubjectController' => 'getLsDefSubjectControllerService',
            'App\\Controller\\Framework\\LsDocController' => 'getLsDocControllerService',
            'App\\Controller\\Framework\\LsItemController' => 'getLsItemControllerService',
            'App\\Controller\\GithubImportController' => 'getGithubImportControllerService',
            'App\\Controller\\GithubOauthController' => 'getGithubOauthControllerService',
            'App\\Controller\\ImportLogsController' => 'getImportLogsControllerService',
            'App\\Controller\\Mirror\\FrameworkController' => 'getFrameworkControllerService',
            'App\\Controller\\Mirror\\OAuthCredentialsController' => 'getOAuthCredentialsControllerService',
            'App\\Controller\\Mirror\\ServerController' => 'getServerControllerService',
            'App\\Controller\\PdfExportController' => 'getPdfExportControllerService',
            'App\\Controller\\SessionController' => 'getSessionControllerService',
            'App\\Controller\\Site\\AboutController' => 'getAboutControllerService',
            'App\\Controller\\Site\\DevController' => 'getDevControllerService',
            'App\\Controller\\SystemLogController' => 'getSystemLogControllerService',
            'App\\Controller\\UiInfoController' => 'getUiInfoControllerService',
            'App\\Controller\\UriController' => 'getUriControllerService',
            'App\\Controller\\User\\ChangePasswordController' => 'getChangePasswordControllerService',
            'App\\Controller\\User\\FrameworkAclController' => 'getFrameworkAclControllerService',
            'App\\Controller\\User\\OAuthServiceController' => 'getOAuthServiceControllerService',
            'App\\Controller\\User\\OrganizationController' => 'getOrganizationControllerService',
            'App\\Controller\\User\\SecurityController' => 'getSecurityControllerService',
            'App\\Controller\\User\\SignupController' => 'getSignupControllerService',
            'App\\Controller\\User\\UserController' => 'getUserControllerService',
            'App\\Service\\Api1RouteMap' => 'getApi1RouteMapService',
            'App\\Service\\Api1Uris' => 'getApi1UrisService',
            'App\\Service\\CodeceptionBridge' => 'getCodeceptionBridgeService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command.public_alias.App\\Console\\Framework\\CopyDocumentToItemCommand' => 'getCopyDocumentToItemCommandService',
            'console.command.public_alias.App\\Console\\User\\OrgAddCommand' => 'getOrgAddCommandService',
            'console.command.public_alias.App\\Console\\User\\UserAddCommand' => 'getUserAddCommandService',
            'console.command.public_alias.App\\Console\\User\\UserAddRoleCommand' => 'getUserAddRoleCommandService',
            'console.command.public_alias.App\\Console\\User\\UserRemoveRoleCommand' => 'getUserRemoveRoleCommandService',
            'console.command.public_alias.App\\Console\\User\\UserSetPasswordCommand' => 'getUserSetPasswordCommandService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'csa_guzzle.client.json' => 'getCsaGuzzle_Client_JsonService',
            'csa_guzzle.data_collector.history_bag' => 'getCsaGuzzle_DataCollector_HistoryBagService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'error_controller' => 'getErrorControllerService',
            'filesystem' => 'getFilesystemService',
            'form.factory' => 'getForm_FactoryService',
            'form.type.file' => 'getForm_Type_FileService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'jms_serializer.twig_extension.serializer_runtime_helper' => 'getJmsSerializer_TwigExtension_SerializerRuntimeHelperService',
            'nelmio_security.csp_reporter_controller' => 'getNelmioSecurity_CspReporterControllerService',
            'nelmio_security.ua_parser.ua_php' => 'getNelmioSecurity_UaParser_UaPhpService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'serializer' => 'getSerializerService',
            'services_resetter' => 'getServicesResetterService',
            'session' => 'getSessionService',
            'simplethings_entityaudit.config' => 'getSimplethingsEntityaudit_ConfigService',
            'simplethings_entityaudit.manager' => 'getSimplethingsEntityaudit_ManagerService',
            'simplethings_entityaudit.reader' => 'getSimplethingsEntityaudit_ReaderService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'swiftmailer.transport' => 'getSwiftmailer_TransportService',
            'translator' => 'getTranslatorService',
            'twig' => 'getTwigService',
            'validator' => 'getValidatorService',
        ];
        $this->aliases = [
            'App\\Kernel' => 'kernel',
            'SimpleThings\\EntityAudit\\AuditManager' => 'simplethings_entityaudit.manager',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'mailer' => 'swiftmailer.mailer.default',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true)
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /*
     * Gets the public 'cache.app' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getCache_AppService()
    {
        $this->services['cache.app'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('E+cQWbEel1', 0, ($this->targetDir.''.'/pools'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, $this->parameters['doctrine.connections'], $this->parameters['doctrine.entity_managers'], 'default', 'default');
    }

    /*
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected function getEventDispatcherService()
    {
        $this->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['App\\Security\\Session\\SessionIdleHandler'] ?? $this->getSessionIdleHandlerService());
        }, 1 => 'onKernelRequest'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_security.content_type_listener'] ?? ($this->privates['nelmio_security.content_type_listener'] = new \Nelmio\SecurityBundle\EventListener\ContentTypeListener(true)));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_security.external_redirect_listener'] ?? $this->getNelmioSecurity_ExternalRedirectListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_security.referrer_policy_listener'] ?? $this->getNelmioSecurity_ReferrerPolicyListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['nelmio_cors.cors_listener'] ?? $this->getNelmioCors_CorsListenerService());
        }, 1 => 'onKernelRequest'], 250);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_cors.cors_listener'] ?? $this->getNelmioCors_CorsListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_cors.cacheable_response_vary_listener'] ?? ($this->privates['nelmio_cors.cacheable_response_vary_listener'] = new \Nelmio\CorsBundle\EventListener\CacheableResponseVaryListener()));
        }, 1 => 'onResponse'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['qandidate.toggle.toggle.listener'] ?? $this->getQandidate_Toggle_Toggle_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['App\\EventListener\\ApiExceptionListener'] ?? $this->load('getApiExceptionListenerService'));
        }, 1 => 'onKernelException'], 0);
        $instance->addListener('App\\Event\\CommandEvent', [0 => function () {
            return ($this->privates['App\\EventListener\\CommandEventRouter'] ?? $this->load('getCommandEventRouterService'));
        }, 1 => 'routeCommand'], 0);
        $instance->addListener('security.interactive_login', [0 => function () {
            return ($this->privates['App\\EventListener\\LoginCaptchaListener'] ?? ($this->privates['App\\EventListener\\LoginCaptchaListener'] = new \App\EventListener\LoginCaptchaListener($this->getEnv('GOOGLE_CAPTCHA_SECRET_KEY'))));
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('App\\Event\\NotificationEvent', [0 => function () {
            return ($this->privates['App\\EventListener\\NotificationLoggingListener'] ?? $this->load('getNotificationLoggingListenerService'));
        }, 1 => 'logNotification'], 0);
        $instance->addListener('App\\Event\\NotificationEvent', [0 => function () {
            return ($this->privates['App\\EventListener\\NotificationToFirebaseListener'] ?? $this->load('getNotificationToFirebaseListenerService'));
        }, 1 => 'handleNotification'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['App\\EventListener\\SiteVersionListener'] ?? $this->getSiteVersionListenerService());
        }, 1 => 'onKernelResponse'], 200);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['App\\EventListener\\VaryOriginListener'] ?? ($this->privates['App\\EventListener\\VaryOriginListener'] = new \App\EventListener\VaryOriginListener()));
        }, 1 => 'onKernelResponse'], -10);
        $instance->addListener('App\\Command\\Comment\\AddCommentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Comment\\AddCommentHandler'] ?? $this->load('getAddCommentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Comment\\DeleteCommentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Comment\\DeleteCommentHandler'] ?? $this->load('getDeleteCommentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Comment\\DownvoteCommentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Comment\\DownvoteCommentHandler'] ?? $this->load('getDownvoteCommentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Comment\\UpdateCommentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Comment\\UpdateCommentHandler'] ?? $this->load('getUpdateCommentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Comment\\UpvoteCommentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Comment\\UpvoteCommentHandler'] ?? $this->load('getUpvoteCommentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Email\\SendAdminNotificationEmailCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Email\\SendAdminNotificationEmailHandler'] ?? $this->load('getSendAdminNotificationEmailHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Email\\SendSignupReceivedEmailCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Email\\SendSignupReceivedEmailHandler'] ?? $this->load('getSendSignupReceivedEmailHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Email\\SendUserApprovedEmailCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Email\\SendUserApprovedEmailHandler'] ?? $this->load('getSendUserApprovedEmailHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddAssociationGroupCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddAssociationGroupHandler'] ?? $this->load('getAddAssociationGroupHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddAssociationCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddAssociationHandler'] ?? $this->load('getAddAssociationHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddConceptCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddConceptHandler'] ?? $this->load('getAddConceptHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddDocumentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddDocumentHandler'] ?? $this->load('getAddDocumentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddExemplarToItemCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddExemplarToItemHandler'] ?? $this->load('getAddExemplarToItemHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddExternalDocCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddExternalDocHandler'] ?? $this->load('getAddExternalDocHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddGradeCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddGradeHandler'] ?? $this->load('getAddGradeHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddItemCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddItemHandler'] ?? $this->load('getAddItemHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddItemTypeCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddItemTypeHandler'] ?? $this->load('getAddItemTypeHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddLicenceCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddLicenceHandler'] ?? $this->load('getAddLicenceHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddSubjectCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddSubjectHandler'] ?? $this->load('getAddSubjectHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\AddTreeAssociationCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\AddTreeAssociationHandler'] ?? $this->load('getAddTreeAssociationHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\ChangeItemParentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\ChangeItemParentHandler'] ?? $this->load('getChangeItemParentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\CloneFrameworkCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\CloneFrameworkHandler'] ?? $this->load('getCloneFrameworkHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\CopyDocumentToItemCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\CopyDocumentToItemHandler'] ?? $this->load('getCopyDocumentToItemHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\CopyFrameworkCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\CopyFrameworkHandler'] ?? $this->load('getCopyFrameworkHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\CopyItemToDocCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\CopyItemToDocHandler'] ?? $this->load('getCopyItemToDocHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteAssociationGroupCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteAssociationGroupHandler'] ?? $this->load('getDeleteAssociationGroupHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteAssociationCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteAssociationHandler'] ?? $this->load('getDeleteAssociationHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteConceptCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteConceptHandler'] ?? $this->load('getDeleteConceptHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteDocumentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteDocumentHandler'] ?? $this->load('getDeleteDocumentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteGradeCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteGradeHandler'] ?? $this->load('getDeleteGradeHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteItemCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteItemHandler'] ?? $this->load('getDeleteItemHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteItemTypeCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteItemTypeHandler'] ?? $this->load('getDeleteItemTypeHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteItemWithChildrenCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteItemWithChildrenHandler'] ?? $this->load('getDeleteItemWithChildrenHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteLicenceCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteLicenceHandler'] ?? $this->load('getDeleteLicenceHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeleteSubjectCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeleteSubjectHandler'] ?? $this->load('getDeleteSubjectHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\DeriveDocumentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\DeriveDocumentHandler'] ?? $this->load('getDeriveDocumentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\LockDocumentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\LockDocumentHandler'] ?? $this->load('getLockDocumentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UnlockDocumentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\LockDocumentHandler'] ?? $this->load('getLockDocumentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\LockItemCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\LockItemHandler'] ?? $this->load('getLockItemHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UnlockItemCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\LockItemHandler'] ?? $this->load('getLockItemHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\RemoveChildCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\RemoveChildHandler'] ?? $this->load('getRemoveChildHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateAssociationGroupCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateAssociationGroupHandler'] ?? $this->load('getUpdateAssociationGroupHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateAssociationCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateAssociationHandler'] ?? $this->load('getUpdateAssociationHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateConceptCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateConceptHandler'] ?? $this->load('getUpdateConceptHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateDocumentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateDocumentHandler'] ?? $this->load('getUpdateDocumentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateFrameworkCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateFrameworkHandler'] ?? $this->load('getUpdateFrameworkHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateGradeCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateGradeHandler'] ?? $this->load('getUpdateGradeHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateItemCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateItemHandler'] ?? $this->load('getUpdateItemHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateItemTypeCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateItemTypeHandler'] ?? $this->load('getUpdateItemTypeHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateLicenceCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateLicenceHandler'] ?? $this->load('getUpdateLicenceHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateSubjectCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateSubjectHandler'] ?? $this->load('getUpdateSubjectHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Framework\\UpdateTreeItemsCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Framework\\UpdateTreeItemsHandler'] ?? $this->load('getUpdateTreeItemsHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Import\\ImportAsnFromUrlCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Import\\ImportAsnFromUrlHandler'] ?? $this->load('getImportAsnFromUrlHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Import\\ImportCaseJsonCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Import\\ImportCaseJsonHandler'] ?? $this->load('getImportCaseJsonHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Import\\ImportExcelFileCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Import\\ImportExcelFileHandler'] ?? $this->load('getImportExcelFileHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Import\\ImportGenericCsvCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Import\\ImportGenericCsvHandler'] ?? $this->load('getImportGenericCsvHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Import\\MarkImportLogsAsReadCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Import\\MarkImportLogsAsReadHandler'] ?? $this->load('getMarkImportLogsAsReadHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\Import\\ParseCsvGithubDocumentCommand', [0 => function () {
            return ($this->privates['App\\Handler\\Import\\ParseCsvGithubDocumentHandler'] ?? $this->load('getParseCsvGithubDocumentHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\ActivateUserCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\ActivateUserHandler'] ?? $this->load('getActivateUserHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\AddFrameworkUserAclCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\AddFrameworkUserAclHandler'] ?? $this->load('getAddFrameworkUserAclHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\AddFrameworkUsernameAclCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\AddFrameworkUsernameAclHandler'] ?? $this->load('getAddFrameworkUsernameAclHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\AddOrganizationByNameCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\AddOrganizationByNameHandler'] ?? $this->load('getAddOrganizationByNameHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\AddOrganizationCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\AddOrganizationHandler'] ?? $this->load('getAddOrganizationHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\AddUserByNameCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\AddUserByNameHandler'] ?? $this->load('getAddUserByNameHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\AddUserCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\AddUserHandler'] ?? $this->load('getAddUserHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\AddUserRoleCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\AddUserRoleHandler'] ?? $this->load('getAddUserRoleHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\ChangePasswordCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\ChangePasswordHandler'] ?? $this->load('getChangePasswordHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\DeleteFrameworkAclCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\DeleteFrameworkAclHandler'] ?? $this->load('getDeleteFrameworkAclHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\DeleteOrganizationCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\DeleteOrganizationHandler'] ?? $this->load('getDeleteOrganizationHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\DeleteUserCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\DeleteUserHandler'] ?? $this->load('getDeleteUserHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\RemoveUserRoleCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\RemoveUserRoleHandler'] ?? $this->load('getRemoveUserRoleHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\SetUserPasswordCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\SetUserPasswordHandler'] ?? $this->load('getSetUserPasswordHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\SuspendUserCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\SuspendUserHandler'] ?? $this->load('getSuspendUserHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\UpdateOrganizationCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\UpdateOrganizationHandler'] ?? $this->load('getUpdateOrganizationHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('App\\Command\\User\\UpdateUserCommand', [0 => function () {
            return ($this->privates['App\\Handler\\User\\UpdateUserHandler'] ?? $this->load('getUpdateUserHandlerService'));
        }, 1 => 'handle'], 0);
        $instance->addListener('console.command', [0 => function () {
            return ($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService());
        }, 1 => 'onCommand'], 255);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService());
        }, 1 => 'onTerminate'], -255);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.controller.listener'] ?? $this->getSensioFrameworkExtra_Controller_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.converter.listener'] ?? $this->getSensioFrameworkExtra_Converter_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelController'], -128);
        $instance->addListener('kernel.view', [0 => function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelView'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.cache.listener'] ?? ($this->privates['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener()));
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['sensio_framework_extra.cache.listener'] ?? ($this->privates['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener()));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['sensio_framework_extra.security.listener'] ?? $this->getSensioFrameworkExtra_Security_ListenerService());
        }, 1 => 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['framework_extra_bundle.event.is_granted'] ?? $this->getFrameworkExtraBundle_Event_IsGrantedService());
        }, 1 => 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['swiftmailer.email_sender.listener'] ?? $this->load('getSwiftmailer_EmailSender_ListenerService'));
        }, 1 => 'onException'], 0);
        $instance->addListener('kernel.terminate', [0 => function () {
            return ($this->privates['swiftmailer.email_sender.listener'] ?? $this->load('getSwiftmailer_EmailSender_ListenerService'));
        }, 1 => 'onTerminate'], 0);
        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['swiftmailer.email_sender.listener'] ?? $this->load('getSwiftmailer_EmailSender_ListenerService'));
        }, 1 => 'onException'], 0);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['swiftmailer.email_sender.listener'] ?? $this->load('getSwiftmailer_EmailSender_ListenerService'));
        }, 1 => 'onTerminate'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_security.clickjacking_listener'] ?? $this->getNelmioSecurity_ClickjackingListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['nelmio_security.csp_listener'] ?? $this->getNelmioSecurity_CspListenerService());
        }, 1 => 'onKernelRequest'], 512);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_security.csp_listener'] ?? $this->getNelmioSecurity_CspListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['nelmio_security.xss_protection_listener'] ?? $this->getNelmioSecurity_XssProtectionListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['response_listener'] ?? ($this->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8')));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['streamed_response_listener'] ?? ($this->privates['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener()));
        }, 1 => 'onKernelResponse'], -1024);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['validate_request_listener'] ?? ($this->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()));
        }, 1 => 'onKernelRequest'], 256);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onKernelException'], -128);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'removeCspHeader'], -128);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService'));
        }, 1 => 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService'));
        }, 1 => 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['console.suggest_missing_package_subscriber'] ?? ($this->privates['console.suggest_missing_package_subscriber'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()));
        }, 1 => 'onConsoleError'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onKernelResponse'], -1000);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onFinishRequest'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['request.add_request_formats_listener'] ?? $this->getRequest_AddRequestFormatsListenerService());
        }, 1 => 'onKernelRequest'], 100);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['esi_listener'] ?? $this->getEsiListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['fragment.listener'] ?? $this->getFragment_ListenerService());
        }, 1 => 'onKernelRequest'], 48);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('console.command', [0 => function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelException'], -64);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['web_link.add_link_header_listener'] ?? ($this->privates['web_link.add_link_header_listener'] = new \Symfony\Component\WebLink\EventListener\AddLinkHeaderListener()));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['security.firewall'] ?? $this->getSecurity_FirewallService());
        }, 1 => 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['security.firewall'] ?? $this->getSecurity_FirewallService());
        }, 1 => 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['security.firewall'] ?? $this->getSecurity_FirewallService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['security.rememberme.response_listener'] ?? ($this->privates['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener()));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () {
            return ($this->privates['security.logout.listener.csrf_token_clearing'] ?? $this->load('getSecurity_Logout_Listener_CsrfTokenClearingService'));
        }, 1 => 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService())), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($this->privates['argument_metadata_factory'] ?? ($this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory())), new RewindableGenerator(function () {
            yield 0 => ($this->privates['argument_resolver.request_attribute'] ?? ($this->privates['argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver()));
            yield 1 => ($this->privates['argument_resolver.request'] ?? ($this->privates['argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver()));
            yield 2 => ($this->privates['argument_resolver.session'] ?? ($this->privates['argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver()));
            yield 3 => ($this->privates['security.user_value_resolver'] ?? $this->load('getSecurity_UserValueResolverService'));
            yield 4 => ($this->privates['argument_resolver.service'] ?? $this->load('getArgumentResolver_ServiceService'));
            yield 5 => ($this->privates['argument_resolver.default'] ?? ($this->privates['argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver()));
            yield 6 => ($this->privates['argument_resolver.variadic'] ?? ($this->privates['argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver()));
        }, 7)));
    }

    /*
     * Gets the public 'qandidate.toggle.collection' shared service.
     *
     * @return \Qandidate\Toggle\ToggleCollection\InMemoryCollection
     */
    protected function getQandidate_Toggle_CollectionService()
    {
        return $this->services['qandidate.toggle.collection'] = ($this->privates['qandidate.toggle.collection.serializer.in_memory'] ?? ($this->privates['qandidate.toggle.collection.serializer.in_memory'] = new \Qandidate\Toggle\Serializer\InMemoryCollectionSerializer()))->deserialize(['comments' => ['name' => 'comments', 'status' => $this->getEnv('COMMENTS_FEATURE'), 'conditions' => []], 'comment_attachments' => ['name' => 'comment_attachments', 'status' => $this->getEnv('COMMENT_ATTACHMENTS'), 'conditions' => []], 'create_account' => ['name' => 'create_account', 'status' => $this->getEnv('CREATE_ACCOUNT_FEATURE'), 'conditions' => []], 'email_feature' => ['name' => 'email_feature', 'status' => $this->getEnv('USE_MAIL_FEATURE'), 'conditions' => []]]);
    }

    /*
     * Gets the public 'qandidate.toggle.collection.in_memory' shared service.
     *
     * @return \Qandidate\Toggle\ToggleCollection\InMemoryCollection
     */
    protected function getQandidate_Toggle_Collection_InMemoryService()
    {
        return $this->services['qandidate.toggle.collection.in_memory'] = ($this->privates['qandidate.toggle.collection.serializer.in_memory'] ?? ($this->privates['qandidate.toggle.collection.serializer.in_memory'] = new \Qandidate\Toggle\Serializer\InMemoryCollectionSerializer()))->deserialize(['comments' => ['name' => 'comments', 'status' => $this->getEnv('COMMENTS_FEATURE'), 'conditions' => []], 'comment_attachments' => ['name' => 'comment_attachments', 'status' => $this->getEnv('COMMENT_ATTACHMENTS'), 'conditions' => []], 'create_account' => ['name' => 'create_account', 'status' => $this->getEnv('CREATE_ACCOUNT_FEATURE'), 'conditions' => []], 'email_feature' => ['name' => 'email_feature', 'status' => $this->getEnv('USE_MAIL_FEATURE'), 'conditions' => []]]);
    }

    /*
     * Gets the public 'qandidate.toggle.manager' shared service.
     *
     * @return \Qandidate\Toggle\ToggleManager
     */
    protected function getQandidate_Toggle_ManagerService()
    {
        return $this->services['qandidate.toggle.manager'] = new \Qandidate\Toggle\ToggleManager(($this->services['qandidate.toggle.collection'] ?? $this->getQandidate_Toggle_CollectionService()));
    }

    /*
     * Gets the public 'qandidate.toggle.user_context_factory' shared service.
     *
     * @return \Qandidate\Bundle\ToggleBundle\Context\UserContextFactory
     */
    protected function getQandidate_Toggle_UserContextFactoryService()
    {
        return $this->services['qandidate.toggle.user_context_factory'] = new \Qandidate\Bundle\ToggleBundle\Context\UserContextFactory(($this->services['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));
    }

    /*
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /*
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected function getRouterService()
    {
        $a = new \Symfony\Bridge\Monolog\Logger('router');
        $a->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        $this->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $this), 'kernel::loadRoutes', ['cache_dir' => $this->targetDir.'', 'debug' => false, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => NULL, 'resource_type' => 'service'], ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))), $a, 'en');

        $instance->setConfigCacheFactory(($this->privates['config_cache_factory'] ?? ($this->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory())));
        $instance->addExpressionLanguageProvider(($this->privates['router.expression_language_provider'] ?? $this->getRouter_ExpressionLanguageProviderService()));

        return $instance;
    }

    /*
     * Gets the public 'security.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($this->services['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), ($this->privates['security.authentication.manager'] ?? $this->getSecurity_Authentication_ManagerService()), ($this->privates['security.access.decision_manager'] ?? $this->getSecurity_Access_DecisionManagerService()), false);
    }

    /*
     * Gets the public 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($this->privates['security.untracked_token_storage'] ?? ($this->privates['security.untracked_token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage())), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'session' => ['services', 'session', 'getSessionService', true],
        ], [
            'session' => '?',
        ]));
    }

    /*
     * Gets the private 'App\EventListener\SiteVersionListener' shared autowired service.
     *
     * @return \App\EventListener\SiteVersionListener
     */
    protected function getSiteVersionListenerService()
    {
        return $this->privates['App\\EventListener\\SiteVersionListener'] = new \App\EventListener\SiteVersionListener(\dirname(__DIR__, 4), ($this->services['cache.app'] ?? $this->getCache_AppService()));
    }

    /*
     * Gets the private 'App\Security\Session\SessionIdleHandler' shared autowired service.
     *
     * @return \App\Security\Session\SessionIdleHandler
     */
    protected function getSessionIdleHandlerService()
    {
        return $this->privates['App\\Security\\Session\\SessionIdleHandler'] = new \App\Security\Session\SessionIdleHandler(($this->services['security.authorization_checker'] ?? $this->getSecurity_AuthorizationCheckerService()), ($this->services['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), $this->getEnv('int:SESSION_MAX_IDLE_TIME'));
    }

    /*
     * Gets the private 'annotations.cached_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\CachedReader
     */
    protected function getAnnotations_CachedReaderService()
    {
        return $this->privates['annotations.cached_reader'] = new \Doctrine\Common\Annotations\CachedReader(($this->privates['annotations.reader'] ?? $this->getAnnotations_ReaderService()), $this->load('getAnnotations_CacheService'), false);
    }

    /*
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected function getAnnotations_ReaderService()
    {
        $this->privates['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $a = new \Doctrine\Common\Annotations\AnnotationRegistry();
        $a->registerUniqueLoader('class_exists');

        $instance->addGlobalIgnoredName('required', $a);

        return $instance;
    }

    /*
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        $a = new \Symfony\Bridge\Monolog\Logger('php');
        $a->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        return $this->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $a, NULL, 0, false, ($this->privates['debug.file_link_formatter'] ?? ($this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))), false, NULL);
    }

    /*
     * Gets the private 'esi_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SurrogateListener
     */
    protected function getEsiListenerService()
    {
        return $this->privates['esi_listener'] = new \Symfony\Component\HttpKernel\EventListener\SurrogateListener(($this->privates['esi'] ?? ($this->privates['esi'] = new \Symfony\Component\HttpKernel\HttpCache\Esi())));
    }

    /*
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected function getExceptionListenerService()
    {
        return $this->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), false);
    }

    /*
     * Gets the private 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected function getFragment_ListenerService()
    {
        return $this->privates['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(($this->privates['uri_signer'] ?? ($this->privates['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner($this->getEnv('APP_SECRET')))), '/_fragment');
    }

    /*
     * Gets the private 'framework_extra_bundle.argument_name_convertor' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter
     */
    protected function getFrameworkExtraBundle_ArgumentNameConvertorService()
    {
        return $this->privates['framework_extra_bundle.argument_name_convertor'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter(($this->privates['argument_metadata_factory'] ?? ($this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory())));
    }

    /*
     * Gets the private 'framework_extra_bundle.event.is_granted' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener
     */
    protected function getFrameworkExtraBundle_Event_IsGrantedService()
    {
        return $this->privates['framework_extra_bundle.event.is_granted'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener(($this->privates['framework_extra_bundle.argument_name_convertor'] ?? $this->getFrameworkExtraBundle_ArgumentNameConvertorService()), ($this->services['security.authorization_checker'] ?? $this->getSecurity_AuthorizationCheckerService()));
    }

    /*
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected function getLocaleAwareListenerService()
    {
        return $this->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () {
            yield 0 => ($this->privates['slugger'] ?? ($this->privates['slugger'] = new \Symfony\Component\String\Slugger\AsciiSlugger('en')));
            yield 1 => ($this->services['translator'] ?? $this->load('getTranslatorService'));
        }, 2), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected function getLocaleListenerService()
    {
        return $this->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), 'en', ($this->services['router'] ?? $this->getRouterService()));
    }

    /*
     * Gets the private 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        return $this->privates['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, true, [], []);
    }

    /*
     * Gets the private 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler
     */
    protected function getMonolog_Handler_MainService()
    {
        $a = new \Monolog\Handler\StreamHandler('php://stdout', 100, true, NULL, false);
        $a->pushProcessor(new \Monolog\Processor\PsrLogMessageProcessor());

        return $this->privates['monolog.handler.main'] = new \Monolog\Handler\FingersCrossedHandler($a, new \Symfony\Bridge\Monolog\Handler\FingersCrossed\NotFoundActivationStrategy(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), [0 => '^/'], 400), 0, true, true, NULL);
    }

    /*
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_LoggerService()
    {
        $this->privates['monolog.logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->privates['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->privates['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

        return $instance;
    }

    /*
     * Gets the private 'nelmio_cors.cors_listener' shared service.
     *
     * @return \Nelmio\CorsBundle\EventListener\CorsListener
     */
    protected function getNelmioCors_CorsListenerService()
    {
        return $this->privates['nelmio_cors.cors_listener'] = new \Nelmio\CorsBundle\EventListener\CorsListener(new \Nelmio\CorsBundle\Options\Resolver([0 => new \Nelmio\CorsBundle\Options\ConfigProvider($this->parameters['nelmio_cors.map'], $this->parameters['nelmio_cors.defaults'])]));
    }

    /*
     * Gets the private 'nelmio_security.clickjacking_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\ClickjackingListener
     */
    protected function getNelmioSecurity_ClickjackingListenerService()
    {
        return $this->privates['nelmio_security.clickjacking_listener'] = new \Nelmio\SecurityBundle\EventListener\ClickjackingListener($this->parameters['nelmio_security.clickjacking.paths'], []);
    }

    /*
     * Gets the private 'nelmio_security.csp_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\ContentSecurityPolicyListener
     */
    protected function getNelmioSecurity_CspListenerService()
    {
        $a = new \Nelmio\SecurityBundle\ContentSecurityPolicy\PolicyManager();

        return $this->privates['nelmio_security.csp_listener'] = new \Nelmio\SecurityBundle\EventListener\ContentSecurityPolicyListener(\Nelmio\SecurityBundle\ContentSecurityPolicy\DirectiveSet::fromConfig($a, ['enabled' => true, 'hosts' => [], 'content_types' => [], 'report_endpoint' => ['log_channel' => NULL, 'log_formatter' => 'nelmio_security.csp_report.log_formatter', 'log_level' => 'notice', 'filters' => ['domains' => true, 'schemes' => true, 'browser_bugs' => true, 'injected_scripts' => true], 'dismiss' => []], 'compat_headers' => true, 'report_logger_service' => 'logger', 'hash' => ['algorithm' => 'sha256']], 'report'), \Nelmio\SecurityBundle\ContentSecurityPolicy\DirectiveSet::fromConfig($a, ['enabled' => true, 'hosts' => [], 'content_types' => [], 'report_endpoint' => ['log_channel' => NULL, 'log_formatter' => 'nelmio_security.csp_report.log_formatter', 'log_level' => 'notice', 'filters' => ['domains' => true, 'schemes' => true, 'browser_bugs' => true, 'injected_scripts' => true], 'dismiss' => []], 'compat_headers' => true, 'report_logger_service' => 'logger', 'hash' => ['algorithm' => 'sha256']], 'enforce'), new \Nelmio\SecurityBundle\ContentSecurityPolicy\NonceGenerator(16), ($this->privates['nelmio_security.sha_computer'] ?? ($this->privates['nelmio_security.sha_computer'] = new \Nelmio\SecurityBundle\ContentSecurityPolicy\ShaComputer('sha256'))), true, [], []);
    }

    /*
     * Gets the private 'nelmio_security.external_redirect_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\ExternalRedirectListener
     */
    protected function getNelmioSecurity_ExternalRedirectListenerService()
    {
        return $this->privates['nelmio_security.external_redirect_listener'] = new \Nelmio\SecurityBundle\EventListener\ExternalRedirectListener(false, NULL, NULL, new \Nelmio\SecurityBundle\ExternalRedirect\WhitelistBasedTargetValidator('(?:.*\\.google\\.com|google\\.com)'), NULL, ($this->services['router'] ?? $this->getRouterService()));
    }

    /*
     * Gets the private 'nelmio_security.referrer_policy_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\ReferrerPolicyListener
     */
    protected function getNelmioSecurity_ReferrerPolicyListenerService()
    {
        return $this->privates['nelmio_security.referrer_policy_listener'] = new \Nelmio\SecurityBundle\EventListener\ReferrerPolicyListener($this->parameters['nelmio_security.referrer_policy.policies']);
    }

    /*
     * Gets the private 'nelmio_security.xss_protection_listener' shared service.
     *
     * @return \Nelmio\SecurityBundle\EventListener\XssProtectionListener
     */
    protected function getNelmioSecurity_XssProtectionListenerService()
    {
        return $this->privates['nelmio_security.xss_protection_listener'] = \Nelmio\SecurityBundle\EventListener\XssProtectionListener::fromConfig(['enabled' => true, 'mode_block' => true, 'report_uri' => NULL]);
    }

    /*
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected function getParameterBagService()
    {
        return $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this);
    }

    /*
     * Gets the private 'qandidate.toggle.toggle.listener' shared service.
     *
     * @return \Qandidate\Bundle\ToggleBundle\EventListener\ToggleListener
     */
    protected function getQandidate_Toggle_Toggle_ListenerService()
    {
        return $this->privates['qandidate.toggle.toggle.listener'] = new \Qandidate\Bundle\ToggleBundle\EventListener\ToggleListener(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()), ($this->services['qandidate.toggle.manager'] ?? $this->getQandidate_Toggle_ManagerService()), ($this->services['qandidate.toggle.user_context_factory'] ?? $this->getQandidate_Toggle_UserContextFactoryService())->createContext());
    }

    /*
     * Gets the private 'request.add_request_formats_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\AddRequestFormatsListener
     */
    protected function getRequest_AddRequestFormatsListenerService()
    {
        return $this->privates['request.add_request_formats_listener'] = new \Symfony\Component\HttpKernel\EventListener\AddRequestFormatsListener(['jsonapi' => [0 => 'application/vnd.api+json'], 'csv' => [0 => 'text/csv', 1 => 'text/plain']]);
    }

    /*
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected function getRouter_ExpressionLanguageProviderService()
    {
        return $this->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
        ], [
            'env' => 'Closure',
        ]));
    }

    /*
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRouter_RequestContextService()
    {
        $this->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($this->privates['router.expression_language_provider'] ?? $this->getRouter_ExpressionLanguageProviderService()));

        return $instance;
    }

    /*
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected function getRouterListenerService()
    {
        return $this->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($this->services['router'] ?? $this->getRouterService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), \dirname(__DIR__, 4), false);
    }

    /*
     * Gets the private 'security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        return $this->privates['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () {
            yield 0 => ($this->privates['security.access.authenticated_voter'] ?? $this->load('getSecurity_Access_AuthenticatedVoterService'));
            yield 1 => ($this->privates['security.access.role_hierarchy_voter'] ?? $this->load('getSecurity_Access_RoleHierarchyVoterService'));
            yield 2 => ($this->privates['security.access.expression_voter'] ?? $this->load('getSecurity_Access_ExpressionVoterService'));
            yield 3 => ($this->privates['App\\Security\\Voter\\AssociationVoter'] ?? $this->load('getAssociationVoterService'));
            yield 4 => ($this->privates['App\\Security\\Voter\\CommentVoter'] ?? $this->load('getCommentVoterService'));
            yield 5 => ($this->privates['App\\Security\\Voter\\FeatureVoter'] ?? $this->load('getFeatureVoterService'));
            yield 6 => ($this->privates['App\\Security\\Voter\\FrameworkAccessVoter'] ?? $this->load('getFrameworkAccessVoterService'));
            yield 7 => ($this->privates['App\\Security\\Voter\\FrameworkManageEditorsVoter'] ?? $this->load('getFrameworkManageEditorsVoterService'));
            yield 8 => ($this->privates['App\\Security\\Voter\\ItemVoter'] ?? $this->load('getItemVoterService'));
            yield 9 => ($this->privates['App\\Security\\Voter\\ManageAdditionalFieldVoter'] ?? $this->load('getManageAdditionalFieldVoterService'));
            yield 10 => ($this->privates['App\\Security\\Voter\\ManageLogVoter'] ?? $this->load('getManageLogVoterService'));
            yield 11 => ($this->privates['App\\Security\\Voter\\ManageMirrorVoter'] ?? $this->load('getManageMirrorVoterService'));
            yield 12 => ($this->privates['App\\Security\\Voter\\ManageOrganizationVoter'] ?? $this->load('getManageOrganizationVoterService'));
            yield 13 => ($this->privates['App\\Security\\Voter\\ManageUserVoter'] ?? $this->load('getManageUserVoterService'));
        }, 14), 'affirmative', false, true);
    }

    /*
     * Gets the private 'security.authentication.manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $this->privates['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(new RewindableGenerator(function () {
            yield 0 => ($this->privates['security.authentication.provider.guard.main'] ?? $this->load('getSecurity_Authentication_Provider_Guard_MainService'));
            yield 1 => ($this->privates['security.authentication.provider.anonymous.main'] ?? ($this->privates['security.authentication.provider.anonymous.main'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider($this->getParameter('container.build_hash'))));
        }, 2), true);

        $instance->setEventDispatcher(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));

        return $instance;
    }

    /*
     * Gets the private 'security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener
     */
    protected function getSecurity_FirewallService()
    {
        return $this->privates['security.firewall'] = new \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener(new \Symfony\Bundle\SecurityBundle\Security\FirewallMap(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'security.firewall.map.context.dev' => ['privates', 'security.firewall.map.context.dev', 'getSecurity_Firewall_Map_Context_DevService', true],
            'security.firewall.map.context.main' => ['privates', 'security.firewall.map.context.main', 'getSecurity_Firewall_Map_Context_MainService', true],
            'security.firewall.map.context.read_api' => ['privates', 'security.firewall.map.context.read_api', 'getSecurity_Firewall_Map_Context_ReadApiService', true],
            'security.firewall.map.context.session_check' => ['privates', 'security.firewall.map.context.session_check', 'getSecurity_Firewall_Map_Context_SessionCheckService', true],
        ], [
            'security.firewall.map.context.dev' => '?',
            'security.firewall.map.context.main' => '?',
            'security.firewall.map.context.read_api' => '?',
            'security.firewall.map.context.session_check' => '?',
        ]), new RewindableGenerator(function () {
            yield 'security.firewall.map.context.dev' => ($this->privates['.security.request_matcher.Iy.T22O'] ?? ($this->privates['.security.request_matcher.Iy.T22O'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/')));
            yield 'security.firewall.map.context.session_check' => ($this->privates['.security.request_matcher.WijBsVl'] ?? ($this->privates['.security.request_matcher.WijBsVl'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/session/check', NULL, [0 => 'GET'])));
            yield 'security.firewall.map.context.read_api' => ($this->privates['.security.request_matcher.vhxjTwx'] ?? ($this->privates['.security.request_matcher.vhxjTwx'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/', NULL, [0 => 'GET'])));
            yield 'security.firewall.map.context.main' => ($this->privates['.security.request_matcher.3UEFixr'] ?? ($this->privates['.security.request_matcher.3UEFixr'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/')));
        }, 4)), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService()));
    }

    /*
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->privates['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['router'] ?? $this->getRouterService()), ($this->services['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));

        $instance->registerListener('main', '/logout', 'logout', '_csrf_token', NULL, NULL);

        return $instance;
    }

    /*
     * Gets the private 'security.role_hierarchy' shared service.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->privates['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy($this->parameters['security.role_hierarchy.roles']);
    }

    /*
     * Gets the private 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->privates['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()));
    }

    /*
     * Gets the private 'sensio_framework_extra.converter.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        $a = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();
        $a->add(new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter(($this->services['doctrine'] ?? $this->getDoctrineService()), new \Symfony\Component\ExpressionLanguage\ExpressionLanguage()), 0, 'doctrine.orm');
        $a->add(new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter(), 0, 'datetime');

        return $this->privates['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($a, true);
    }

    /*
     * Gets the private 'sensio_framework_extra.security.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->privates['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(($this->privates['framework_extra_bundle.argument_name_convertor'] ?? $this->getFrameworkExtraBundle_ArgumentNameConvertorService()), new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), ($this->privates['security.authentication.trust_resolver'] ?? ($this->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver())), ($this->privates['security.role_hierarchy'] ?? $this->getSecurity_RoleHierarchyService()), ($this->services['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), ($this->services['security.authorization_checker'] ?? $this->getSecurity_AuthorizationCheckerService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the private 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        $this->privates['sensio_framework_extra.view.listener'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener(new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(($this->services['kernel'] ?? $this->get('kernel', 1))));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'twig' => ['services', 'twig', 'getTwigService', true],
        ], [
            'twig' => 'Twig\\Environment',
        ]))->withContext('sensio_framework_extra.view.listener', $this));

        return $instance;
    }

    /*
     * Gets the private 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected function getSessionListenerService()
    {
        return $this->privates['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'initialized_session' => ['services', 'session', NULL, true],
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'session' => ['services', 'session', 'getSessionService', true],
        ], [
            'initialized_session' => '?',
            'logger' => '?',
            'session' => '?',
        ]), false);
    }

    public function getParameter(string $name)
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.cache_dir' => false,
        'database_host' => false,
        'database_port' => false,
        'database_name' => false,
        'database_user' => false,
        'database_password' => false,
        'mailer_transport' => false,
        'mailer_host' => false,
        'mailer_user' => false,
        'mailer_password' => false,
        'mailer_auth_mode' => false,
        'mailer_port' => false,
        'secret' => false,
        'cookie_secret' => false,
        'github_client_id' => false,
        'github_client_secret' => false,
        'brand_logo_url' => false,
        'brand_logo_style' => false,
        'brand_link_url' => false,
        'brand_link_style' => false,
        'comments_feature' => false,
        'comment_attachments' => false,
        'firebase_api_key' => false,
        'firebase_db_url' => false,
        'firebase_auth_domain' => false,
        'firebase_project_id' => false,
        'firebase_client_id' => false,
        'firebase_client_email' => false,
        'firebase_private_key' => false,
        'firebase_prefix' => false,
        'create_account_feature' => false,
        'use_mail_feature' => false,
        'mail_feature_from_email' => false,
        'google_captcha_site_key' => false,
        'google_captcha_secret_key' => false,
        'session_max_idle_time' => false,
        'aws_key' => false,
        'aws_secret' => false,
        'aws_prefix' => false,
        'aws_region' => false,
        'aws_bucket' => false,
        'attachment_url_prefix' => false,
        'bucket_provider' => false,
        'local_filesystem_path' => false,
        'footer_left_text' => false,
        'case_network_client_id' => false,
        'case_network_client_secret' => false,
        'case_network_token_endpoint' => false,
        'case_network_scope' => false,
        'swiftmailer.spool.default.memory.path' => false,
        'doctrine.orm.proxy_dir' => false,
        'kernel.secret' => false,
        'session.save_path' => false,
        'validator.mapping.cache.file' => false,
        'serializer.mapping.cache.file' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        switch ($name) {
            case 'kernel.cache_dir': $value = $this->targetDir.''; break;
            case 'database_host': $value = $this->getEnv('MYSQL_HOST'); break;
            case 'database_port': $value = $this->getEnv('int:MYSQL_PORT'); break;
            case 'database_name': $value = $this->getEnv('MYSQL_DATABASE'); break;
            case 'database_user': $value = $this->getEnv('MYSQL_USER'); break;
            case 'database_password': $value = $this->getEnv('MYSQL_PASSWORD'); break;
            case 'mailer_transport': $value = $this->getEnv('MAILER_TRANSPORT'); break;
            case 'mailer_host': $value = $this->getEnv('MAILER_HOST'); break;
            case 'mailer_user': $value = $this->getEnv('MAILER_USER'); break;
            case 'mailer_password': $value = $this->getEnv('MAILER_PASSWORD'); break;
            case 'mailer_auth_mode': $value = $this->getEnv('MAILER_AUTH_MODE'); break;
            case 'mailer_port': $value = $this->getEnv('int:MAILER_PORT'); break;
            case 'secret': $value = $this->getEnv('APP_SECRET'); break;
            case 'cookie_secret': $value = $this->getEnv('COOKIE_SECRET'); break;
            case 'github_client_id': $value = $this->getEnv('GITHUB_CLIENT_ID'); break;
            case 'github_client_secret': $value = $this->getEnv('GITHUB_CLIENT_SECRET'); break;
            case 'brand_logo_url': $value = $this->getEnv('BRAND_LOGO_URL'); break;
            case 'brand_logo_style': $value = $this->getEnv('BRAND_LOGO_STYLE'); break;
            case 'brand_link_url': $value = $this->getEnv('BRAND_LINK_URL'); break;
            case 'brand_link_style': $value = $this->getEnv('BRAND_LINK_STYLE'); break;
            case 'comments_feature': $value = $this->getEnv('COMMENTS_FEATURE'); break;
            case 'comment_attachments': $value = $this->getEnv('COMMENT_ATTACHMENTS'); break;
            case 'firebase_api_key': $value = $this->getEnv('FIREBASE_API_KEY'); break;
            case 'firebase_db_url': $value = $this->getEnv('FIREBASE_DB_URL'); break;
            case 'firebase_auth_domain': $value = $this->getEnv('FIREBASE_AUTH_DOMAIN'); break;
            case 'firebase_project_id': $value = $this->getEnv('FIREBASE_PROJECT_ID'); break;
            case 'firebase_client_id': $value = $this->getEnv('FIREBASE_CLIENT_ID'); break;
            case 'firebase_client_email': $value = $this->getEnv('FIREBASE_CLIENT_EMAIL'); break;
            case 'firebase_private_key': $value = $this->getEnv('FIREBASE_PRIVATE_KEY'); break;
            case 'firebase_prefix': $value = $this->getEnv('FIREBASE_PREFIX'); break;
            case 'create_account_feature': $value = $this->getEnv('CREATE_ACCOUNT_FEATURE'); break;
            case 'use_mail_feature': $value = $this->getEnv('USE_MAIL_FEATURE'); break;
            case 'mail_feature_from_email': $value = $this->getEnv('MAIL_FEATURE_FROM_EMAIL'); break;
            case 'google_captcha_site_key': $value = $this->getEnv('GOOGLE_CAPTCHA_SITE_KEY'); break;
            case 'google_captcha_secret_key': $value = $this->getEnv('GOOGLE_CAPTCHA_SECRET_KEY'); break;
            case 'session_max_idle_time': $value = $this->getEnv('int:SESSION_MAX_IDLE_TIME'); break;
            case 'aws_key': $value = $this->getEnv('AWS_ACCESS_KEY_ID'); break;
            case 'aws_secret': $value = $this->getEnv('AWS_SECRET_ACCESS_KEY'); break;
            case 'aws_prefix': $value = $this->getEnv('AWS_S3_PREFIX'); break;
            case 'aws_region': $value = $this->getEnv('AWS_S3_REGION'); break;
            case 'aws_bucket': $value = $this->getEnv('AWS_S3_BUCKET'); break;
            case 'attachment_url_prefix': $value = $this->getEnv('ATTACHMENT_URL_PREFIX'); break;
            case 'bucket_provider': $value = $this->getEnv('BUCKET_PROVIDER'); break;
            case 'local_filesystem_path': $value = $this->getEnv('LOCAL_FILESYSTEM_PATH'); break;
            case 'footer_left_text': $value = $this->getEnv('FOOTER_LEFT_TEXT'); break;
            case 'case_network_client_id': $value = $this->getEnv('CASE_NETWORK_CLIENT_ID'); break;
            case 'case_network_client_secret': $value = $this->getEnv('CASE_NETWORK_CLIENT_SECRET'); break;
            case 'case_network_token_endpoint': $value = $this->getEnv('CASE_NETWORK_TOKEN_ENDPOINT'); break;
            case 'case_network_scope': $value = $this->getEnv('CASE_NETWORK_SCOPE'); break;
            case 'swiftmailer.spool.default.memory.path': $value = ($this->targetDir.''.'/swiftmailer/spool/default'); break;
            case 'doctrine.orm.proxy_dir': $value = ($this->targetDir.''.'/doctrine/orm/Proxies'); break;
            case 'kernel.secret': $value = $this->getEnv('APP_SECRET'); break;
            case 'session.save_path': $value = ($this->targetDir.''.'/sessions'); break;
            case 'validator.mapping.cache.file': $value = ($this->targetDir.''.'/validation.php'); break;
            case 'serializer.mapping.cache.file': $value = ($this->targetDir.''.'/serialization.php'); break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'prod',
            'kernel.debug' => false,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/log'),
            'kernel.bundles' => [
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'SimpleThingsEntityAuditBundle' => 'SimpleThings\\EntityAudit\\SimpleThingsEntityAuditBundle',
                'CsaGuzzleBundle' => 'Csa\\Bundle\\GuzzleBundle\\CsaGuzzleBundle',
                'NelmioSecurityBundle' => 'Nelmio\\SecurityBundle\\NelmioSecurityBundle',
                'NelmioCorsBundle' => 'Nelmio\\CorsBundle\\NelmioCorsBundle',
                'TetranzSelect2EntityBundle' => 'Tetranz\\Select2EntityBundle\\TetranzSelect2EntityBundle',
                'QandidateToggleBundle' => 'Qandidate\\Bundle\\ToggleBundle\\QandidateToggleBundle',
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'TwigExtraBundle' => 'Twig\\Extra\\TwigExtraBundle\\TwigExtraBundle',
            ],
            'kernel.bundles_metadata' => [
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
                'SensioFrameworkExtraBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ],
                'SwiftmailerBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/swiftmailer-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SwiftmailerBundle',
                ],
                'JMSSerializerBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/jms/serializer-bundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ],
                'DoctrineBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'DoctrineMigrationsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ],
                'SimpleThingsEntityAuditBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/simplethings/entity-audit-bundle/src/SimpleThings/EntityAudit'),
                    'namespace' => 'SimpleThings\\EntityAudit',
                ],
                'CsaGuzzleBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/csa/guzzle-bundle/src'),
                    'namespace' => 'Csa\\Bundle\\GuzzleBundle',
                ],
                'NelmioSecurityBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/nelmio/security-bundle'),
                    'namespace' => 'Nelmio\\SecurityBundle',
                ],
                'NelmioCorsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle'),
                    'namespace' => 'Nelmio\\CorsBundle',
                ],
                'TetranzSelect2EntityBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/tetranz/select2entity-bundle'),
                    'namespace' => 'Tetranz\\Select2EntityBundle',
                ],
                'QandidateToggleBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/qandidate/toggle-bundle'),
                    'namespace' => 'Qandidate\\Bundle\\ToggleBundle',
                ],
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'SecurityBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/security-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'StofDoctrineExtensionsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/antishov/doctrine-extensions-bundle'),
                    'namespace' => 'Stof\\DoctrineExtensionsBundle',
                ],
                'TwigExtraBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/twig/extra-bundle/src'),
                    'namespace' => 'Twig\\Extra\\TwigExtraBundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'App_KernelProdContainer',
            'env(DATABASE_URL)' => '',
            'pdo_options' => NULL,
            'env(MYSQL_HOST)' => NULL,
            'env(MYSQL_PORT)' => '3306',
            'env(MYSQL_DATABASE)' => NULL,
            'env(MYSQL_USER)' => NULL,
            'env(MYSQL_PASSWORD)' => NULL,
            'env(MAILER_TRANSPORT)' => 'smtp',
            'env(MAILER_HOST)' => '127.0.0.1',
            'env(MAILER_USER)' => NULL,
            'env(MAILER_PASSWORD)' => NULL,
            'env(MAILER_AUTH_MODE)' => NULL,
            'env(MAILER_PORT)' => NULL,
            'env(APP_SECRET)' => NULL,
            'env(COOKIE_SECRET)' => NULL,
            'env(GITHUB_CLIENT_ID)' => NULL,
            'env(GITHUB_CLIENT_SECRET)' => NULL,
            'env(COMMENTS_FEATURE)' => 'inactive',
            'env(COMMENT_ATTACHMENTS)' => 'inactive',
            'env(CREATE_ACCOUNT_FEATURE)' => 'inactive',
            'env(USE_MAIL_FEATURE)' => 'inactive',
            'env(MAIL_FEATURE_FROM_EMAIL)' => NULL,
            'env(BRAND_LOGO_URL)' => NULL,
            'env(BRAND_LOGO_STYLE)' => NULL,
            'env(BRAND_LINK_URL)' => NULL,
            'env(BRAND_LINK_STYLE)' => NULL,
            'env(FIREBASE_API_KEY)' => NULL,
            'env(FIREBASE_DB_URL)' => NULL,
            'env(FIREBASE_AUTH_DOMAIN)' => NULL,
            'env(FIREBASE_PROJECT_ID)' => NULL,
            'env(FIREBASE_CLIENT_ID)' => NULL,
            'env(FIREBASE_CLIENT_EMAIL)' => NULL,
            'env(FIREBASE_PRIVATE_KEY)' => NULL,
            'env(FIREBASE_PREFIX)' => 'opensalt',
            'env(GOOGLE_CAPTCHA_SITE_KEY)' => NULL,
            'env(GOOGLE_CAPTCHA_SECRET_KEY)' => NULL,
            'env(SESSION_MAX_IDLE_TIME)' => '3600',
            'env(AWS_ACCESS_KEY_ID)' => NULL,
            'env(AWS_SECRET_ACCESS_KEY)' => NULL,
            'env(AWS_S3_PREFIX)' => NULL,
            'env(AWS_S3_REGION)' => NULL,
            'env(AWS_S3_BUCKET)' => NULL,
            'env(ATTACHMENT_URL_PREFIX)' => NULL,
            'env(BUCKET_PROVIDER)' => NULL,
            'env(LOCAL_FILESYSTEM_PATH)' => NULL,
            'env(FOOTER_LEFT_TEXT)' => NULL,
            'env(CASE_NETWORK_CLIENT_ID)' => NULL,
            'env(CASE_NETWORK_CLIENT_SECRET)' => NULL,
            'env(CASE_NETWORK_TOKEN_ENDPOINT)' => 'https://oauth2-case.imsglobal.org/oauth2server/clienttoken',
            'env(CASE_NETWORK_SCOPE)' => 'http://purl.imsglobal.org/casenetwork/case/v1p0/scope/all.readonly',
            'locale' => 'en',
            'base_template' => 'base.html.twig',
            'assets_version' => '190202',
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.console' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'event',
                        1 => 'doctrine',
                    ],
                ],
                'monolog.handler.main' => NULL,
            ],
            'swiftmailer.mailer.default.transport.name' => 'dynamic',
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => [
                'default' => 'swiftmailer.mailer.default',
            ],
            'swiftmailer.default_mailer' => 'default',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [
                'json' => [
                    'class' => 'App\\Doctrine\\Types\\JsonType',
                ],
                'datetime' => [
                    'class' => 'App\\Doctrine\\Types\\DateTimeType',
                ],
                'uuid' => [
                    'class' => 'Ramsey\\Uuid\\Doctrine\\UuidType',
                ],
                'uuid_binary' => [
                    'class' => 'Ramsey\\Uuid\\Doctrine\\UuidBinaryType',
                ],
                'uuid_binary_ordered_time' => [
                    'class' => 'Ramsey\\Uuid\\Doctrine\\UuidBinaryOrderedTimeType',
                ],
            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => false,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'doctrine.migrations.preferred_em' => NULL,
            'doctrine.migrations.preferred_connection' => NULL,
            'simplethings.entityaudit.audited_entities' => [
                0 => 'App\\Entity\\Framework\\LsDoc',
                1 => 'App\\Entity\\Framework\\LsDocAttribute',
                2 => 'App\\Entity\\Framework\\LsDocSubject',
                3 => 'App\\Entity\\Framework\\LsItem',
                4 => 'App\\Entity\\Framework\\LsItemConcept',
                5 => 'App\\Entity\\Framework\\LsAssociation',
                6 => 'App\\Entity\\Framework\\LsDefAssociationGrouping',
                7 => 'App\\Entity\\Framework\\LsDefItemType',
                8 => 'App\\Entity\\Framework\\LsDefConcept',
                9 => 'App\\Entity\\Framework\\LsDefGrade',
                10 => 'App\\Entity\\Framework\\LsDefLicence',
                11 => 'App\\Entity\\Framework\\LsDefSubject',
                12 => 'App\\Entity\\Framework\\CfRubric',
                13 => 'App\\Entity\\Framework\\CfRubricCriterion',
                14 => 'App\\Entity\\Framework\\CfRubricCriterionLevel',
                15 => 'App\\Entity\\User\\Organization',
                16 => 'App\\Entity\\User\\User',
                17 => 'App\\Entity\\User\\UserDocAcl',
                18 => 'App\\Entity\\ChangeEntry',
            ],
            'simplethings.entityaudit.global_ignore_columns' => [
                0 => 'password',
            ],
            'simplethings.entityaudit.table_prefix' => 'audit_',
            'simplethings.entityaudit.table_suffix' => '',
            'simplethings.entityaudit.revision_field_name' => 'rev',
            'simplethings.entityaudit.revision_type_field_name' => 'revtype',
            'simplethings.entityaudit.revision_table_name' => 'audit_revision',
            'simplethings.entityaudit.revision_id_field_type' => 'integer',
            'nelmio_security.clickjacking.paths' => [
                '^/cftree/doc/' => [
                    'header' => 'ALLOW',
                ],
                '^/.*' => [
                    'header' => 'DENY',
                ],
            ],
            'nelmio_security.clickjacking.content_types' => [

            ],
            'nelmio_security.nonce_generator.number_of_bytes' => 16,
            'nelmio_security.csp.hash_algorithm' => 'sha256',
            'nelmio_security.csp.report_log_level' => 'notice',
            'nelmio_security.content_type.nosniff' => true,
            'nelmio_security.external_redirects.whitelist' => '(?:.*\\.google\\.com|google\\.com)',
            'nelmio_security.external_redirects.override' => NULL,
            'nelmio_security.external_redirects.forward_as' => NULL,
            'nelmio_security.external_redirects.abort' => false,
            'nelmio_security.referrer_policy.policies' => [
                0 => 'no-referrer',
                1 => 'strict-origin-when-cross-origin',
            ],
            'nelmio_cors.map' => [
                '^/ims/case/v1p0/' => [
                    'forced_allow_origin_value' => '*',
                    'allow_origin' => true,
                    'allow_headers' => [
                        0 => 'accept-encoding',
                        1 => 'if-modified-since',
                        2 => 'content-type',
                        3 => 'content-range',
                        4 => 'content-disposition',
                        5 => 'content-description',
                        6 => 'x-requested-with',
                        7 => 'x-opensalt',
                    ],
                    'allow_methods' => [
                        0 => 'GET',
                    ],
                    'expose_headers' => [
                        0 => 'X-Total-Count',
                        1 => 'X-OpenSALT',
                    ],
                    'max_age' => 60,
                ],
                '^/' => [

                ],
            ],
            'nelmio_cors.defaults' => [
                'allow_origin' => [

                ],
                'allow_credentials' => false,
                'allow_headers' => [
                    0 => 'content-type',
                    1 => 'authorization',
                    2 => 'x-opensalt',
                ],
                'expose_headers' => [

                ],
                'allow_methods' => [
                    0 => 'GET',
                    1 => 'OPTIONS',
                    2 => 'POST',
                    3 => 'PUT',
                    4 => 'PATCH',
                    5 => 'DELETE',
                ],
                'max_age' => 0,
                'hosts' => [

                ],
                'origin_regex' => false,
                'forced_allow_origin_value' => NULL,
            ],
            'nelmio_cors.cors_listener.class' => 'Nelmio\\CorsBundle\\EventListener\\CorsListener',
            'nelmio_cors.options_resolver.class' => 'Nelmio\\CorsBundle\\Options\\Resolver',
            'nelmio_cors.options_provider.config.class' => 'Nelmio\\CorsBundle\\Options\\ConfigProvider',
            'tetranz_select2_entity.config' => [
                'minimum_input_length' => 1,
                'scroll' => false,
                'page_limit' => 10,
                'allow_clear' => false,
                'allow_add' => [
                    'enabled' => false,
                    'new_tag_text' => ' (NEW)',
                    'new_tag_prefix' => '__',
                    'tag_separators' => '[",", " "]',
                ],
                'delay' => 250,
                'language' => 'en',
                'cache' => true,
                'cache_timeout' => 60000,
                'width' => NULL,
                'object_manager' => NULL,
                'render_html' => false,
            ],
            'qandidate.toggle.manager.class' => 'Qandidate\\Toggle\\ToggleManager',
            'qandidate.toggle.collection.in_memory.class' => 'Qandidate\\Toggle\\ToggleCollection\\InMemoryCollection',
            'qandidate.toggle.collection.serializer.in_memory.class' => 'Qandidate\\Toggle\\Serializer\\InMemoryCollectionSerializer',
            'qandidate.toggle.collection.predis.class' => 'Qandidate\\Toggle\\ToggleCollection\\PredisCollection',
            'qandidate.toggle.user_context_factory.class' => 'Qandidate\\Bundle\\ToggleBundle\\Context\\UserContextFactory',
            'qandidate.toggle.twig_extension.class' => 'Qandidate\\Bundle\\ToggleBundle\\Twig\\ToggleTwigExtension',
            'qandidate.toggle.toggle.listener.class' => 'Qandidate\\Bundle\\ToggleBundle\\EventListener\\ToggleListener',
            'qandidate.toggle.context.class' => 'Qandidate\\Toggle\\Context',
            'qandidate.toggle.data_collector.toggle_collector.class' => 'Qandidate\\Bundle\\ToggleBundle\\DataCollector\\ToggleCollector',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\Form\\Event\\PreSubmitEvent' => 'form.pre_submit',
                'Symfony\\Component\\Form\\Event\\SubmitEvent' => 'form.submit',
                'Symfony\\Component\\Form\\Event\\PostSubmitEvent' => 'form.post_submit',
                'Symfony\\Component\\Form\\Event\\PreSetDataEvent' => 'form.pre_set_data',
                'Symfony\\Component\\Form\\Event\\PostSetDataEvent' => 'form.post_set_data',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Workflow\\Event\\GuardEvent' => 'workflow.guard',
                'Symfony\\Component\\Workflow\\Event\\LeaveEvent' => 'workflow.leave',
                'Symfony\\Component\\Workflow\\Event\\TransitionEvent' => 'workflow.transition',
                'Symfony\\Component\\Workflow\\Event\\EnterEvent' => 'workflow.enter',
                'Symfony\\Component\\Workflow\\Event\\EnteredEvent' => 'workflow.entered',
                'Symfony\\Component\\Workflow\\Event\\CompletedEvent' => 'workflow.completed',
                'Symfony\\Component\\Workflow\\Event\\AnnounceEvent' => 'workflow.announce',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationFailureEvent' => 'security.authentication.failure',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => [

            ],
            'kernel.default_locale' => 'en',
            'kernel.error_controller' => 'error_controller',
            'debug.file_link_format' => NULL,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'name' => 'session',
                'cookie_lifetime' => 0,
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
                'gc_maxlifetime' => 86400,
                'gc_probability' => 25,
                'gc_divisor' => 100,
            ],
            'session.metadata.update_threshold' => 120,
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'validator.translation_domain' => 'validators',
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/translations'),
            'data_collector.templates' => [

            ],
            'debug.error_handler.throw_at' => 0,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'security.role_hierarchy.roles' => [
                'ROLE_USER' => [

                ],
                'ROLE_EDITOR' => [
                    0 => 'ROLE_USER',
                ],
                'ROLE_ADMIN' => [
                    0 => 'ROLE_EDITOR',
                ],
                'ROLE_SUPER_EDITOR' => [
                    0 => 'ROLE_EDITOR',
                ],
                'ROLE_SUPER_USER' => [
                    0 => 'ROLE_ADMIN',
                    1 => 'ROLE_SUPER_EDITOR',
                    2 => 'ROLE_ALLOWED_TO_SWITCH',
                ],
            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'dev',
                1 => 'session_check',
                2 => 'read_api',
                3 => 'main',
            ],
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
                1 => 'bootstrap_3_horizontal_layout.html.twig',
                2 => '@TetranzSelect2Entity/Form/fields.html.twig',
                3 => 'form/fields.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.default_locale' => 'en_US',
            'stof_doctrine_extensions.translation_fallback' => false,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'console.command.ids' => [
                0 => 'console.command.public_alias.App\\Console\\Framework\\CopyDocumentToItemCommand',
                1 => 'console.command.public_alias.App\\Console\\User\\OrgAddCommand',
                2 => 'console.command.public_alias.App\\Console\\User\\UserAddCommand',
                3 => 'console.command.public_alias.App\\Console\\User\\UserAddRoleCommand',
                4 => 'console.command.public_alias.App\\Console\\User\\UserRemoveRoleCommand',
                5 => 'console.command.public_alias.App\\Console\\User\\UserSetPasswordCommand',
            ],
        ];
    }

    protected function throw($message)
    {
        throw new RuntimeException($message);
    }
}
