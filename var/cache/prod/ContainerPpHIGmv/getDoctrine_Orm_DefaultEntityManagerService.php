<?php

namespace ContainerPpHIGmv;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        if ($lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManager_9a5be93', function () use ($container) {
                return \EntityManager_9a5be93::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->load('getDoctrine_Orm_DefaultEntityManagerService', false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        $a = new \Doctrine\ORM\Configuration();

        $b = new \Doctrine\ORM\Cache\CacheConfiguration();

        $c = new \Doctrine\ORM\Cache\Logging\CacheLoggerChain();
        $c->setLogger('statistics', new \Doctrine\ORM\Cache\Logging\StatisticsCacheLogger());
        $d = new \Doctrine\ORM\Cache\RegionsConfiguration();

        $b->setCacheLogger($c);
        $b->setCacheFactory(new \Doctrine\ORM\Cache\DefaultCacheFactory($d, new \Symfony\Component\Cache\DoctrineProvider(($container->privates['cache.doctrine.orm.default.second_level.region_driver'] ?? ($container->privates['cache.doctrine.orm.default.second_level.region_driver'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())))));
        $b->setRegionsConfiguration($d);
        $e = new \Symfony\Component\Cache\DoctrineProvider(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $f = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $g = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($container->privates['annotations.cached_reader'] ?? $container->getAnnotations_CachedReaderService()), [0 => (\dirname(__DIR__, 4).'/src/Entity'), 1 => (\dirname(__DIR__, 4).'/vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity')]);

        $f->addDriver($g, 'App\\Entity');
        $f->addDriver($g, 'Gedmo\\Tree\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity', 'GedmoTree' => 'Gedmo\\Tree\\Entity']);
        $a->setSecondLevelCacheEnabled(false);
        $a->setSecondLevelCacheConfiguration($b);
        $a->setMetadataCacheImpl($e);
        $a->setQueryCacheImpl($e);
        $a->setResultCacheImpl(new \Symfony\Component\Cache\DoctrineProvider(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService'))));
        $a->setMetadataDriverImpl($f);
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\ChangeEntryRepository' => ['privates', 'App\\Repository\\ChangeEntryRepository', 'getChangeEntryRepositoryService', true],
            'App\\Repository\\CommentRepository' => ['privates', 'App\\Repository\\CommentRepository', 'getCommentRepositoryService', true],
            'App\\Repository\\Framework\\AdditionalFieldRepository' => ['privates', 'App\\Repository\\Framework\\AdditionalFieldRepository', 'getAdditionalFieldRepositoryService', true],
            'App\\Repository\\Framework\\AssociationSubtypeRepository' => ['privates', 'App\\Repository\\Framework\\AssociationSubtypeRepository', 'getAssociationSubtypeRepositoryService', true],
            'App\\Repository\\Framework\\CfRubricCriterionLevelRepository' => ['privates', 'App\\Repository\\Framework\\CfRubricCriterionLevelRepository', 'getCfRubricCriterionLevelRepositoryService', true],
            'App\\Repository\\Framework\\CfRubricCriterionRepository' => ['privates', 'App\\Repository\\Framework\\CfRubricCriterionRepository', 'getCfRubricCriterionRepositoryService', true],
            'App\\Repository\\Framework\\CfRubricRepository' => ['privates', 'App\\Repository\\Framework\\CfRubricRepository', 'getCfRubricRepositoryService', true],
            'App\\Repository\\Framework\\FrameworkTypeRepository' => ['privates', 'App\\Repository\\Framework\\FrameworkTypeRepository', 'getFrameworkTypeRepositoryService', true],
            'App\\Repository\\Framework\\LsAssociationRepository' => ['privates', 'App\\Repository\\Framework\\LsAssociationRepository', 'getLsAssociationRepositoryService', true],
            'App\\Repository\\Framework\\LsDefAssociationGroupingRepository' => ['privates', 'App\\Repository\\Framework\\LsDefAssociationGroupingRepository', 'getLsDefAssociationGroupingRepositoryService', true],
            'App\\Repository\\Framework\\LsDefConceptRepository' => ['privates', 'App\\Repository\\Framework\\LsDefConceptRepository', 'getLsDefConceptRepositoryService', true],
            'App\\Repository\\Framework\\LsDefGradeRepository' => ['privates', 'App\\Repository\\Framework\\LsDefGradeRepository', 'getLsDefGradeRepositoryService', true],
            'App\\Repository\\Framework\\LsDefItemTypeRepository' => ['privates', 'App\\Repository\\Framework\\LsDefItemTypeRepository', 'getLsDefItemTypeRepositoryService', true],
            'App\\Repository\\Framework\\LsDefLicenceRepository' => ['privates', 'App\\Repository\\Framework\\LsDefLicenceRepository', 'getLsDefLicenceRepositoryService', true],
            'App\\Repository\\Framework\\LsDefSubjectRepository' => ['privates', 'App\\Repository\\Framework\\LsDefSubjectRepository', 'getLsDefSubjectRepositoryService', true],
            'App\\Repository\\Framework\\LsDocAttributeRepository' => ['privates', 'App\\Repository\\Framework\\LsDocAttributeRepository', 'getLsDocAttributeRepositoryService', true],
            'App\\Repository\\Framework\\LsDocRepository' => ['privates', 'App\\Repository\\Framework\\LsDocRepository', 'getLsDocRepositoryService', true],
            'App\\Repository\\Framework\\LsItemRepository' => ['privates', 'App\\Repository\\Framework\\LsItemRepository', 'getLsItemRepositoryService', true],
            'App\\Repository\\Framework\\Mirror\\FrameworkRepository' => ['privates', 'App\\Repository\\Framework\\Mirror\\FrameworkRepository', 'getFrameworkRepositoryService', true],
            'App\\Repository\\Framework\\Mirror\\LogRepository' => ['privates', 'App\\Repository\\Framework\\Mirror\\LogRepository', 'getLogRepositoryService', true],
            'App\\Repository\\Framework\\Mirror\\OAuthCredentialRepository' => ['privates', 'App\\Repository\\Framework\\Mirror\\OAuthCredentialRepository', 'getOAuthCredentialRepositoryService', true],
            'App\\Repository\\Framework\\Mirror\\ServerRepository' => ['privates', 'App\\Repository\\Framework\\Mirror\\ServerRepository', 'getServerRepositoryService', true],
            'App\\Repository\\Framework\\ObjectLockRepository' => ['privates', 'App\\Repository\\Framework\\ObjectLockRepository', 'getObjectLockRepositoryService', true],
            'App\\Repository\\SessionRepository' => ['privates', 'App\\Repository\\SessionRepository', 'getSessionRepositoryService', true],
            'App\\Repository\\User\\OrganizationRepository' => ['privates', 'App\\Repository\\User\\OrganizationRepository', 'getOrganizationRepositoryService', true],
            'App\\Repository\\User\\UserDocAclRepository' => ['privates', 'App\\Repository\\User\\UserDocAclRepository', 'getUserDocAclRepositoryService', true],
            'App\\Repository\\User\\UserRepository' => ['privates', 'App\\Repository\\User\\UserRepository', 'getUserRepositoryService', true],
        ], [
            'App\\Repository\\ChangeEntryRepository' => '?',
            'App\\Repository\\CommentRepository' => '?',
            'App\\Repository\\Framework\\AdditionalFieldRepository' => '?',
            'App\\Repository\\Framework\\AssociationSubtypeRepository' => '?',
            'App\\Repository\\Framework\\CfRubricCriterionLevelRepository' => '?',
            'App\\Repository\\Framework\\CfRubricCriterionRepository' => '?',
            'App\\Repository\\Framework\\CfRubricRepository' => '?',
            'App\\Repository\\Framework\\FrameworkTypeRepository' => '?',
            'App\\Repository\\Framework\\LsAssociationRepository' => '?',
            'App\\Repository\\Framework\\LsDefAssociationGroupingRepository' => '?',
            'App\\Repository\\Framework\\LsDefConceptRepository' => '?',
            'App\\Repository\\Framework\\LsDefGradeRepository' => '?',
            'App\\Repository\\Framework\\LsDefItemTypeRepository' => '?',
            'App\\Repository\\Framework\\LsDefLicenceRepository' => '?',
            'App\\Repository\\Framework\\LsDefSubjectRepository' => '?',
            'App\\Repository\\Framework\\LsDocAttributeRepository' => '?',
            'App\\Repository\\Framework\\LsDocRepository' => '?',
            'App\\Repository\\Framework\\LsItemRepository' => '?',
            'App\\Repository\\Framework\\Mirror\\FrameworkRepository' => '?',
            'App\\Repository\\Framework\\Mirror\\LogRepository' => '?',
            'App\\Repository\\Framework\\Mirror\\OAuthCredentialRepository' => '?',
            'App\\Repository\\Framework\\Mirror\\ServerRepository' => '?',
            'App\\Repository\\Framework\\ObjectLockRepository' => '?',
            'App\\Repository\\SessionRepository' => '?',
            'App\\Repository\\User\\OrganizationRepository' => '?',
            'App\\Repository\\User\\UserDocAclRepository' => '?',
            'App\\Repository\\User\\UserRepository' => '?',
        ])));

        $instance = \Doctrine\ORM\EntityManager::create(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
