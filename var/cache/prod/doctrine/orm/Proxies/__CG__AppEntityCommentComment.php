<?php

namespace Proxies\__CG__\App\Entity\Comment;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Comment extends \App\Entity\Comment\Comment implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'parent', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'content', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'user', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'document', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'item', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'upvotes', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'fileUrl', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'fileMimeType', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'createdByCurrentUser', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'userHasUpvoted'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'parent', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'content', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'user', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'document', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'item', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'upvotes', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'fileUrl', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'fileMimeType', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'createdByCurrentUser', '' . "\0" . 'App\\Entity\\Comment\\Comment' . "\0" . 'userHasUpvoted'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Comment $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\App\Entity\Comment\Comment $parent = NULL): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent(): ?\App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentId(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentId', []);

        return parent::getParentId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($content): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', [$content]);

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', []);

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\App\Entity\User\User $user): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser(): \App\Entity\User\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setItem(\App\Entity\Framework\LsItem $item): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setItem', [$item]);

        return parent::setItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getItem(): \App\Entity\Framework\LsItem
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItem', []);

        return parent::getItem();
    }

    /**
     * {@inheritDoc}
     */
    public function setDocument(\App\Entity\Framework\LsDoc $document): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDocument', [$document]);

        return parent::setDocument($document);
    }

    /**
     * {@inheritDoc}
     */
    public function getDocument(): \App\Entity\Framework\LsDoc
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocument', []);

        return parent::getDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullname(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullname', []);

        return parent::getFullname();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedByCurrentUser(bool $createdByCurrentUser): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedByCurrentUser', [$createdByCurrentUser]);

        return parent::setCreatedByCurrentUser($createdByCurrentUser);
    }

    /**
     * {@inheritDoc}
     */
    public function updateStatusForUser(\App\Entity\User\User $user): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateStatusForUser', [$user]);

        return parent::updateStatusForUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function isCreatedByCurrentUser(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCreatedByCurrentUser', []);

        return parent::isCreatedByCurrentUser();
    }

    /**
     * {@inheritDoc}
     */
    public function addUpvote(\App\Entity\Comment\CommentUpvote $upvote): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUpvote', [$upvote]);

        return parent::addUpvote($upvote);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUpvote(\App\Entity\Comment\CommentUpvote $upvote): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUpvote', [$upvote]);

        return parent::removeUpvote($upvote);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpvotes(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpvotes', []);

        return parent::getUpvotes();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpvoteCount(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpvoteCount', []);

        return parent::getUpvoteCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserHasUpvoted(bool $userHasUpvoted): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserHasUpvoted', [$userHasUpvoted]);

        return parent::setUserHasUpvoted($userHasUpvoted);
    }

    /**
     * {@inheritDoc}
     */
    public function hasUserUpvoted(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasUserUpvoted', []);

        return parent::hasUserUpvoted();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileUrl($fileUrl): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileUrl', [$fileUrl]);

        return parent::setFileUrl($fileUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileUrl(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileUrl', []);

        return parent::getFileUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileMimeType($fileMimeType): \App\Entity\Comment\Comment
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileMimeType', [$fileMimeType]);

        return parent::setFileMimeType($fileMimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileMimeType(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileMimeType', []);

        return parent::getFileMimeType();
    }

}
