<?php

namespace Proxies\__CG__\App\Entity\Framework\Mirror;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Framework extends \App\Entity\Framework\Mirror\Framework implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'server', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'url', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'identifier', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'creator', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'title', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'framework', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'include', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'priority', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'statusCount', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastCheck', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastSuccess', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastFailure', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastChange', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'nextCheck', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'errorType', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastContent', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastSuccessContent', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'logs'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'server', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'url', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'identifier', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'creator', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'title', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'framework', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'include', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'priority', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'statusCount', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastCheck', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastSuccess', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastFailure', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastChange', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'nextCheck', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'errorType', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'updatedAt', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastContent', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'lastSuccessContent', '' . "\0" . 'App\\Entity\\Framework\\Mirror\\Framework' . "\0" . 'logs'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Framework $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getServer(): \App\Entity\Framework\Mirror\Server
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServer', []);

        return parent::getServer();
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl(string $url): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentifier(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentifier', []);

        return parent::getIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function isInclude(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInclude', []);

        return parent::isInclude();
    }

    /**
     * {@inheritDoc}
     */
    public function setInclude(bool $include): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInclude', [$include]);

        return parent::setInclude($include);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusCount(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusCount', []);

        return parent::getStatusCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getFramework(): ?\App\Entity\Framework\LsDoc
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFramework', []);

        return parent::getFramework();
    }

    /**
     * {@inheritDoc}
     */
    public function setFramework(?\App\Entity\Framework\LsDoc $framework): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFramework', [$framework]);

        return parent::setFramework($framework);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastCheck(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastCheck', []);

        return parent::getLastCheck();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastChange(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastChange', []);

        return parent::getLastChange();
    }

    /**
     * {@inheritDoc}
     */
    public function getNextCheck(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNextCheck', []);

        return parent::getNextCheck();
    }

    /**
     * {@inheritDoc}
     */
    public function getErrorType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrorType', []);

        return parent::getErrorType();
    }

    /**
     * {@inheritDoc}
     */
    public function isIdConflicted(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isIdConflicted', []);

        return parent::isIdConflicted();
    }

    /**
     * {@inheritDoc}
     */
    public function setErrorType(?string $errorType): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setErrorType', [$errorType]);

        return parent::setErrorType($errorType);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): \DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreator(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreator', []);

        return parent::getCreator();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreator(string $creator): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreator', [$creator]);

        return parent::setCreator($creator);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastSuccessContent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastSuccessContent', []);

        return parent::getLastSuccessContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastSuccessContent(?string $lastSuccessContent): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastSuccessContent', [$lastSuccessContent]);

        return parent::setLastSuccessContent($lastSuccessContent);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastContent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastContent', []);

        return parent::getLastContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastContent(?string $lastContent): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastContent', [$lastContent]);

        return parent::setLastContent($lastContent);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogs(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogs', []);

        return parent::getLogs();
    }

    /**
     * {@inheritDoc}
     */
    public function addLog(string $status, string $message): \App\Entity\Framework\Mirror\Log
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLog', [$status, $message]);

        return parent::addLog($status, $message);
    }

    /**
     * {@inheritDoc}
     */
    public function clearLogs(): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearLogs', []);

        return parent::clearLogs();
    }

    /**
     * {@inheritDoc}
     */
    public function markToRefresh(): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'markToRefresh', []);

        return parent::markToRefresh();
    }

    /**
     * {@inheritDoc}
     */
    public function markSuccess(bool $changed = false): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'markSuccess', [$changed]);

        return parent::markSuccess($changed);
    }

    /**
     * {@inheritDoc}
     */
    public function markFailure(?string $errorType = 'general'): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'markFailure', [$errorType]);

        return parent::markFailure($errorType);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status): \App\Entity\Framework\Mirror\Framework
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function matchesLastSuccessContent(?string $framework): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'matchesLastSuccessContent', [$framework]);

        return parent::matchesLastSuccessContent($framework);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLogs(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLogs', []);

        return parent::hasLogs();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastFailure(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastFailure', []);

        return parent::getLastFailure();
    }

}
