<?php //%255BApp%255CEntity%255CFramework%255CLsDoc%2524urlName%255D%255B1%255D

return [PHP_INT_MAX, static function () { return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        clone ($p['Symfony\\Component\\Validator\\Constraints\\Length'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Length')),
        clone ($p['Symfony\\Component\\Validator\\Constraints\\Regex'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Regex')),
        clone $p['Symfony\\Component\\Validator\\Constraints\\Regex'],
    ],
    null,
    [
        'stdClass' => [
            'name' => [
                'url_name',
            ],
            'length' => [
                255,
            ],
            'unique' => [
                true,
            ],
            'nullable' => [
                true,
            ],
            'max' => [
                1 => 10,
            ],
            'groups' => [
                1 => [
                    'Default',
                ],
                [
                    'Default',
                ],
                [
                    'Default',
                ],
            ],
            'message' => [
                2 => 'The URL Name cannot be a number.',
                'The URL Name can only use alpha-numeric characters plus a period (.) or dash (-).',
            ],
            'pattern' => [
                2 => '/^\\d+$/',
                '/^[a-zA-Z0-9.-]+$/',
            ],
            'match' => [
                2 => false,
            ],
        ],
    ],
    [
        $o[0],
        $o[1],
        $o[2],
        $o[3],
    ],
    []
); }];
